import os
from flask import Flask, send_file, send_from_directory, redirect, url_for, jsonify, request
from sqlite3 import connect, Cursor
from typing import Any
import pandas as pd

# Getting the app started
app = Flask(__name__)


VITE_OUTPUT_DIR = os.path.join(os.path.dirname(__file__), "../frontend/dist/")


# Display index.html generated by Vite
@app.route("/")
def index():
    if not os.path.isdir(VITE_OUTPUT_DIR):
        return redirect(url_for("not_found"))
    else:
        return send_file(
            os.path.join(os.path.dirname(__file__), "../frontend/dist/index.html")
        )


# Search for JSON data.
@app.route("/data/<path:subpath>")
def data(subpath):
    if not os.path.isdir("data/"):
        return redirect(url_for("not_found"))
    else:
        return send_from_directory("data/", subpath)

# Fetch the json data from the database.
@app.route("/pages.json")
def pages_list():
    table = []
    if os.path.isfile("../pages.db"):
        with connect("../pages.db") as db_con:
            table = full_pages_table(db_con.cursor())

    return jsonify(table)


# Return Filepath to excel file for database contents.
@app.route("/pages.xlsx")
def pages_excel():
    filepath = "data/pages.xlsx"
    dump_to_excel("../pages.db", "data/pages.xlsx")
    return send_file(filepath)


# Fetch other pages generated by Vite
@app.route("/<path:subpath>")
def dist(subpath):
    if not os.path.isdir(VITE_OUTPUT_DIR):
        return redirect(url_for("not_found"))
    else:
        return send_file(
            os.path.join(os.path.dirname(__file__), "../frontend/dist/", subpath)
        )
    
@app.route("/delete/pages/url", methods=["DELETE"])
def delete_page():
    pageurl = request.args.get('url')
    if os.path.isfile("../pages.db"):
        with connect("../pages.db") as db_con:
            cursor = db_con.cursor()
            cursor.execute("DELETE FROM pages WHERE url = ?", (pageurl,))
            cursor.close()
    return {'success': True}

# Displaying the database to the front end, and to the localhost server created by the flaskapp.
def full_pages_table(cur: Cursor) -> list[dict[str, Any]]:
    cur.execute(
        "SELECT url, title, score, summary_before, summary_keyword, summary_after FROM pages WHERE score > 0 ORDER BY score DESC"
    )
    rows = cur.fetchall()

    results = []
    for url, title, score, summary_before, summary_keyword, summary_after in rows:
        results.append(
            {
                "url": url,
                "title": title if title is not None else url,
                "score": score,
                "summary_before": summary_before,
                "summary_keyword": summary_keyword,
                "summary_after": summary_after,
            }
        )

    return results

# P1 goal: Be able to export the database into an excel file.
def dump_to_excel(db_path, excel_path):
   conn = connect(db_path)
   table_name = "pages"
   try:
       # Only return the following attributes:
       df = pd.read_sql_query(f"SELECT url, title, score, terms, retrieved FROM {table_name};", conn)
   except Exception as e:
       print(f"Error reading table '{table_name}': {e}")
       conn.close()
       return
   # Write to excel file.
   try:
       df.to_excel(excel_path, index=False, engine='openpyxl')
   except Exception as e:
       print(f"Error writing Excel file: {e}")
   finally:
       conn.close()


if __name__ == "__main__":
    
    app.run(debug=True)
